ext.pluginClassNames='com.dtolabs.rundeck.plugin.overthere.OTWinRMNodeExecutor'

defaultTasks 'clean','build'
version = '1.3-auth_cert'
ext.rundeckPluginVersion= '1.1'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'project-report'
sourceCompatibility = 1.6
archivesBaseName = "rundeck-winrm-plugin"
ext.rundeckVersion='2.3.2'



task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

configurations{
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs

    //declare compile to extend from pluginLibs so it inherits the dependencies
    compile{
        extendsFrom pluginLibs
    }
}
repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    pluginLibs(group: 'com.xebialabs.overthere', name: 'overthere', version: '4.0.0-auth_cert'){
        exclude( module: 'bcprov-jdk16')
        exclude( module: 'jzlib')
        exclude( module: 'sshj')
        exclude( module: 'commons-net')
        exclude( module: 'servlet-api')
        exclude( module: 'xom')
        exclude( module: 'jdom')
        exclude( module: 'dom4j')
        exclude( module: 'jaxen')
        exclude( module: 'icu4j')
        exclude( module: 'jcl-over-slf4j')
    }
//    pluginLibs(group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.3')
    pluginLibs(group: 'org.slf4j', name: 'slf4j-nop', version: '1.6.3')

    compile(group: 'org.rundeck', name: 'rundeck-core', version: rundeckVersion)
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    from "$buildDir/output"

    metaInf {
        from "LICENSE.txt"
        from("thirdparty"){
            include "*"
        }
    }
    manifest {

        def libList = configurations.pluginLibs.collect {'lib/' + it.name}.join(' ')

        attributes 'Rundeck-Plugin-File-Version': version,
                'Rundeck-Plugin-Version': rundeckPluginVersion,
                'Rundeck-Plugin-Archive': 'true',
                'Rundeck-Plugin-Classnames': pluginClassNames,
                'Rundeck-Plugin-Libs': "${libList}"

    }
}

//set jar task to depend on copyToLib
jar.dependsOn(copyToLib)


apply plugin: 'maven'
task mappings << {
    println conf2ScopeMappings.mappings
}
conf2ScopeMappings.addMapping 1, configurations.pluginLibs, 'compile'
conf2ScopeMappings.addMapping 1, configurations.compile, 'provided'

task createPom << {
    def libList = configurations.pluginLibs.collect {'lib/' + it.name}.join(' ')

    pom {
        project {
            parent{
              artifactId 'rundeck-plugins-parent'
              groupId 'org.rundeck-plugins'
              version '2'
            }

            artifactId 'rundeck-winrm-plugin'
            groupId "org.rundeck-plugins"
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "Rundeck WinRM NodeExecutor Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            build{
                plugins{
                    plugin{
                        artifactId 'maven-compiler-plugin'
                        version '2.3.2'
                        configuration{
                            source '1.6'
                            target '1.6'
                        }
                    }
                    plugin() {
                        artifactId('maven-assembly-plugin')
                        version('2.2.2')
                        executions() {
                            execution() {
                                id('make-assembly')
                                phase('package')
                                goals() {
                                    goal('single')
                                }
                            }
                        }
                        configuration() {
                            appendAssemblyId('false')
                            descriptors() {
                                descriptor('src/main/assembly/jar.xml')
                            }
                            archive() {
                                manifestEntries() {
                                    'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                    'Rundeck-Plugin-File-Version'(version)
                                    'Rundeck-Plugin-Archive'('true')
                                    'Rundeck-Plugin-Classnames'(pluginClassNames)
                                    'Rundeck-Plugin-Libs'(libList)
                                }
                            }
                        }
                    }
                }
            }
            scm{
                connection 'scm:git:git@github.com:rundeck-plugins/rundeck-winrm-plugin.git'
                developerConnection 'scm:git:git@github.com:rundeck-plugins/rundeck-winrm-plugin.git'
                url 'git@github.com:rundeck-plugins/rundeck-winrm-plugin.git'
                tag 'HEAD'
            }
        }
    }.writeTo("pom.xml")
}
